{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"18QaKMN-LmOqvpDLAT2MkOqLgnIvt6rFI","timestamp":1701276158693}],"authorship_tag":"ABX9TyP1TMYj3iYRNgkxNR+sT9DD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"w9Owwy21vUtl","executionInfo":{"status":"ok","timestamp":1701273077966,"user_tz":-180,"elapsed":9710,"user":{"displayName":"Анастасия Емельянченко","userId":"13053924609837547775"}},"outputId":"7aafece0-6e2d-47b9-bd7f-2b7f226e08a1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Категория: космос\n","------------------------\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%81%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%82%D0%B2%D0%BE\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%81%D0%BC%D0%BE%D1%81_(%D0%B7%D0%BD%D0%B0%D1%87%D0%B5%D0%BD%D0%B8%D1%8F)\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D0%B6%D0%B7%D0%B2%D1%91%D0%B7%D0%B4%D0%BD%D0%B0%D1%8F_%D1%81%D1%80%D0%B5%D0%B4%D0%B0\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D0%BD%D0%B8%D1%8F_%D0%9A%D0%B0%D1%80%D0%BC%D0%B0%D0%BD%D0%B0\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%81%D0%BC%D0%BE%D1%81_(%D1%84%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F)\n","Статус: Информационный\n","Ссылка: https://en.wikipedia.org/wiki/Outer_space\n","Статус: Коммерческий\n","Ссылка: https://www.gctc.ru/main.php?id=277\n","Статус: Информационный\n","Ссылка: https://rg.ru/tema/obshestvo/kosmos\n","Статус: Коммерческий\n","Ссылка: https://tass.ru/kosmos\n","Статус: Информационный\n","Ссылка: https://ria.ru/space/\n","\n","Всего найдено ссылок: 10\n","Коммерческий: 2\n","Информационный: 8\n","Не определен: 0\n","\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-2-a87c543c4288>:97: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  results_df = results_df.append({\n"]},{"output_type":"stream","name":"stdout","text":["Категория: собака\n","------------------------\n","Статус: Не определен\n","Ссылка: https://www.google.com/preferences?hl=en\n","Статус: Информационный\n","Ссылка: https://en.wikipedia.org/wiki/Dog\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%B1%D0%B0%D0%BA%D0%B0\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B8%D1%81%D1%85%D0%BE%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B4%D0%BE%D0%BC%D0%B0%D1%88%D0%BD%D0%B5%D0%B9_%D1%81%D0%BE%D0%B1%D0%B0%D0%BA%D0%B8\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%BE%D1%80%D0%BE%D0%B6%D0%B5%D0%B2%D0%B0%D1%8F_%D1%81%D0%BE%D0%B1%D0%B0%D0%BA%D0%B0\n","Статус: Информационный\n","Ссылка: https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%B1%D0%B0%D0%BA%D0%B0_%D0%91%D0%B0%D1%81%D0%BA%D0%B5%D1%80%D0%B2%D0%B8%D0%BB%D0%B5%D0%B9\n","Статус: Коммерческий\n","Ссылка: https://www.sobaka.ru/\n","Статус: Информационный\n","Ссылка: https://ru.wikiquote.org/wiki/%D0%A1%D0%BE%D0%B1%D0%B0%D0%BA%D0%B0\n","Статус: Информационный\n","Ссылка: https://www.purina.ru/dogs/breed-library\n","Статус: Информационный\n","Ссылка: https://en.wiktionary.org/wiki/%D1%81%D0%BE%D0%B1%D0%B0%D0%BA%D0%B0\n","\n","Всего найдено ссылок: 10\n","Коммерческий: 1\n","Информационный: 8\n","Не определен: 1\n","\n","\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-2-a87c543c4288>:97: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  results_df = results_df.append({\n"]},{"output_type":"execute_result","data":{"text/plain":["   Запрос Коммерческие ссылки Информационные ссылки Не определенные ссылки\n","0  космос                   2                     8                      0\n","1  собака                   1                     8                      1"],"text/html":["\n","  <div id=\"df-4f7e0989-4677-4d83-8552-6e644953c7c7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Запрос</th>\n","      <th>Коммерческие ссылки</th>\n","      <th>Информационные ссылки</th>\n","      <th>Не определенные ссылки</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>космос</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>собака</td>\n","      <td>1</td>\n","      <td>8</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f7e0989-4677-4d83-8552-6e644953c7c7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4f7e0989-4677-4d83-8552-6e644953c7c7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4f7e0989-4677-4d83-8552-6e644953c7c7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0586b5e0-3038-4b56-8e55-f81415e8327e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0586b5e0-3038-4b56-8e55-f81415e8327e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0586b5e0-3038-4b56-8e55-f81415e8327e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":2}],"source":["import requests\n","from bs4 import BeautifulSoup\n","import urllib.parse\n","import pandas as pd\n","\n","queries = [\"космос\", \"собака\"]\n","num_links = 10\n","commercial_keywords = [\"/catalog/\", \"/shop/\", \"/katalog/\", \"/uslugi/\", \"/product/\", \"/tovar/\", \"/price/\",\n","    \"/ceny/\", \"/category/\", \"/services/\", \"/store/\", \"/buy/\", \"/checkout/\", \"/delivery/\", \"/cart/\", \"/offer/\", \"/discount/\", \"/promotion/\", \"/service/\"]\n","informational_keywords = [\"/blog/\", \"/stati/\", \"/wiki/\", \"/staty/\", \"/forum/\", \"/reviews/\", \"/instructions/\", \"/events/\", \"/video/\", \"/news/\", \"/tema/\", \"/watch\"]\n","\n","# Создаем пустой DataFrame для хранения результатов\n","results_df = pd.DataFrame(columns=[\"Запрос\", \"Коммерческие ссылки\", \"Информационные ссылки\", \"Не определенные ссылки\"])\n","\n","def analyze_text(text):\n","    keywords_commercial = ['цена', 'акция', 'Акция', 'распродажа', 'ликвидация', 'магазин', 'стоимость', 'расценка', 'ценник', 'прайс', 'тариф',\n","                'купить', 'приобрести', 'заказать', 'купить в магазине', 'прикупить',\n","                'продать', 'реализовать', 'продавать', 'продаваться', 'выставить на продажу',\n","                'изготовить', 'произвести', 'изготовлять', 'изготовление', 'сделать',\n","                'каталог', 'список товаров', 'ассортимент', 'доставка', 'доставить', 'доставлять', 'отправка', 'пересылка']\n","\n","    keywords_informational = ['новости', 'статьи', 'блог', 'информация', 'известия', 'события',\n","                'публикации', 'материалы', 'эссе', 'рассказы', 'исследования',\n","                'веб-журнал', 'онлайн-дневник', 'записи', 'статьи', 'Библиотека', 'библиотека']\n","\n","    if any(keyword in text for keyword in keywords_commercial):\n","        return \"Коммерческий\"\n","    elif any(keyword in text for keyword in keywords_informational):\n","        return \"Информационный\"\n","    else:\n","        return \"Не определен\"\n","\n","def get_and_analyze_content(url):\n","    response = requests.get(url)\n","    if response.status_code == 200:\n","        text = response.text\n","        status = analyze_text(text)\n","        return status\n","    else:\n","        print(f'Ошибка при получении содержимого страницы: {response.status_code}')\n","        return \"Не определен\"\n","\n","for query in queries:\n","    # Формируем URL для поиска в Google\n","    url = f\"https://www.google.com/search?q={urllib.parse.quote(query)}\"\n","    headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"}\n","    # Отправляем GET-запрос и получаем HTML-код страницы\n","    response = requests.get(url)\n","\n","    soup = BeautifulSoup(response.text, \"html.parser\")\n","    # Счетчики для категорий\n","    commercial_count = 0\n","    informational_count = 0\n","    undefined_count = 0\n","    # Находим все ссылки на странице\n","    links = soup.find_all(\"a\")\n","    # Выводим ссылки с указанием статуса\n","    print(f\"Категория: {query}\")\n","    print(\"------------------------\")\n","    for link in links:\n","        href = link.get(\"href\")\n","\n","        # Проверяем, содержит ли ссылка полный URL-адрес\n","        if href.startswith(\"/url?q=\"):\n","            real_link = urllib.parse.unquote(href[7:]).split(\"&\")[0]\n","            # Проверяем наличие ключевых слов в ссылке и увеличиваем соответствующий счетчик\n","            if any(keyword in real_link for keyword in commercial_keywords):\n","                print(f\"Статус: Коммерческий\")\n","                print(f\"Ссылка: {real_link}\")\n","                commercial_count += 1\n","            elif any(keyword in real_link for keyword in informational_keywords):\n","                print(f\"Статус: Информационный\")\n","                print(f\"Ссылка: {real_link}\")\n","                informational_count += 1\n","            else:\n","                status = get_and_analyze_content(real_link)\n","                print(f\"Статус: {status}\")\n","                print(f\"Ссылка: {real_link}\")\n","                if status == \"Коммерческий\":\n","                    commercial_count += 1\n","                elif status == \"Информационный\":\n","                    informational_count += 1\n","                else:\n","                    undefined_count += 1\n","\n","            # Если достигнуто максимальное количество ссылок, выходим из цикла\n","            if commercial_count + informational_count + undefined_count == num_links:\n","                break\n","# Выводим количество ссылок для каждой категории\n","    print(f\"\\nВсего найдено ссылок: {commercial_count + informational_count + undefined_count}\")\n","    print(f\"Коммерческий: {commercial_count}\")\n","    print(f\"Информационный: {informational_count}\")\n","    print(f\"Не определен: {undefined_count}\")\n","    print(\"\\n\")\n","\n","    # Добавляем результаты в DataFrame\n","    results_df = results_df.append({\n","        \"Запрос\": query,\n","        \"Коммерческие ссылки\": commercial_count,\n","        \"Информационные ссылки\": informational_count,\n","        \"Не определенные ссылки\": undefined_count\n","    }, ignore_index=True)\n","\n","# Выводим итоговый DataFrame\n","#print(results_df)\n","results_df"]}]}